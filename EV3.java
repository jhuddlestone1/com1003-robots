/** Utility functions for EV3 robot.
@author		Jamie Huddlestone
*/

/*------	DO NOT EDIT THIS FILE!!!	------*/


import ShefRobot.*;

public class EV3 {
	
	final int MOTOR_SPEED = 100;

	final int WHEEL_DIAMETER = 55;	// mm
	final int WHEEL_CIRCUMFERENCE = (int) Math.round(WHEEL_DIAMETER * Math.PI);

	final int WHEEL_TRACK = 120;	// mm
	final int WHEEL_TURN_CIRCLE = (int) Math.round(WHEEL_TRACK * Math.PI);

	final double TURN_RATIO = WHEEL_TURN_CIRCLE / WHEEL_CIRCUMFERENCE;

	Robot ev3;
	Speaker speaker;
	Motor grabMotor;
	Motor leftMotor;
	Motor rightMotor;
	ColorSensor colorSensor;
	UltrasonicSensor distanceSensor;

	/* Constructor */

	public EV3(String id) {
		ev3 = new Robot(id);
		grabMotor = ev3.getMediumMotor(Motor.Port.A);
		leftMotor = ev3.getLargeMotor(Motor.Port.B);
		rightMotor = ev3.getLargeMotor(Motor.Port.C);
		colorSensor = ev3.getColorSensor(Sensor.Port.S1);
		distanceSensor = ev3.getUltrasonicSensor(Sensor.Port.S2);
		speaker = ev3.getSpeaker();
		
		leftMotor.setSpeed(MOTOR_SPEED);
		rightMotor.setSpeed(MOTOR_SPEED);		
	}

	/* Basic functions */

	public void grab() {
		grabMotor.forward();
		while (!grabMotor.isStalled());
		grabMotor.stop();
	}

	public void release() {
		grabMotor.backward();
		while (!grabMotor.isStalled());
		grabMotor.stop();
	}

	public void goForward() {
		leftMotor.forward();
		rightMotor.forward();
	}

	public void goForward(int mm) {
		leftMotor.rotate(360 * mm / WHEEL_CIRCUMFERENCE, true);
		rightMotor.rotate(360 * mm / WHEEL_CIRCUMFERENCE, true);
	}

	public void goBackward() {
		leftMotor.backward();
		rightMotor.backward();
	}

	public void goBackward(int mm) {
		leftMotor.rotate(-360 * mm / WHEEL_CIRCUMFERENCE, true);
		rightMotor.rotate(-360 * mm / WHEEL_CIRCUMFERENCE, true);
	}

	public void turnLeft() {
		//leftMotor.backward();
		rightMotor.forward();
	}

	public void turnLeft(int deg) {
		//leftMotor.rotate(-(int) Math.round(deg * TURN_RATIO), true);
		rightMotor.rotate((int) Math.round(deg * 2 * TURN_RATIO));	//, true);
	}

	public void turnRight() {
		leftMotor.forward();
		//rightMotor.backward();
	}

	public void turnRight(int deg) {
		leftMotor.rotate((int) Math.round(deg * 2 * TURN_RATIO));	//, true);
		//rightMotor.rotate(-(int) Math.round(deg * TURN_RATIO), true);
	}

	public void stop() {
		leftMotor.stop();
		rightMotor.stop();
	}

	public ColorSensor.Color getColor() {
		return colorSensor.getColor();
	}

	public double getDistance() {
		return (double) distanceSensor.getDistance();
	}
	
	public void sleep(int ms) {
		ev3.sleep(ms);
	}
	
	public void close() {
		ev3.close();
	}

	/* Composite functions */

	public ColorSensor.Color scanForward() {
		ColorSensor.Color color = getColor();
		goForward();
		while (color == getColor());
		stop();
		return getColor();
	}
	
	public ColorSensor.Color scanLeft() {
		ColorSensor.Color color = getColor();
		turnLeft();
		while (color == getColor());
		stop();
		return getColor();
	}

	public ColorSensor.Color scanLeft(int deg) {
		ColorSensor.Color color = getColor();
		turnLeft(deg);
		while (color == getColor());
		stop();
		return getColor();
	}

	public ColorSensor.Color scanRight() {
		ColorSensor.Color color = getColor();
		turnRight();
		while (color == getColor());
		stop();
		return getColor();
	}

	public ColorSensor.Color scanRight(int deg) {
		ColorSensor.Color color = getColor();
		turnRight(deg);
		while (color == getColor());
		stop();
		return getColor();
	}

	/* Main function */

	public static void main(String[] args) {

		EV3 robot = new EV3("dia-lego-e2");
		
		boolean run = true;
		
		robot.scanForward();
		robot.turnLeft(90);
		while (run) {

			switch (robot.getColor()) {

				case YELLOW:
					robot.stop();
					robot.release();
					//robot.dance();
					run = false;
					break;

				case RED:
					robot.goForward();
					while (robot.getDistance() > 0.05);
					robot.stop();
					robot.grab();
					robot.turnRight(180);
					robot.scanForward();
					break;

				case WHITE:
					robot.scanRight();
					break;

				case BLACK:
				default:
					robot.scanLeft();
					break;
			}
		}
		robot.close();
	}
}